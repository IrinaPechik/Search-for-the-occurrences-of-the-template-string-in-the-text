#include <string>

class CharByCharAlgorithm {
public:
    /*
     * Находит последний индекс текста, который удовлетворяет паттерну.
     */
    static int findPattern(std::string text, std::string pattern) {
        // Длина текста.
        int n = static_cast<int>(text.length());
        // Длина подстроки.
        int m = static_cast<int>(pattern.length());
        // Индекс последнего вхождения изначально -1.
        int index = -1;
        // Пробегаемся по символам строки до последнего первого символа,
        // который возможно будет удовлетворять шаблону.
        for (int i = 0; i <= n - m; ++i) {
            // Если текущий символ равен нулевому символу шаблона,
            // значит, возможно, он будет ему полностью удовлетворять.
            if (text[i] == pattern[0]) {
                bool found = true;
                // Теперь бегаем по шаблону начиная с уже первого элемента и проверяем,
                // равен ли следующий элемент текста паттерну.
                for (int j = 1; j < m; ++j) {
                    if (text[i + j] != pattern[j]) {
                        found = false;
                        break;
                    }
                }
                // Если подстрока начинающаяся в i-ом символе удовлетворяет паттерну, то запоминаем индекс,
                // с которого эта подстрока начиналась.
                if (found) {
                    index = i;
                }
            }
        }
        return index;
    }
};